import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
#!pip install plotly-express

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

from sklearn.neighbors import KNeighborsRegressor
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor

# Reading Dataset
df = pd.read_csv("Datasets/kc_house.csv")
df.sample(3)

df.shape
df.isnull().sum()

sns.countplot(x="view", data=df);

sns.countplot(x="waterfront", data=df);

#Relation between price and number of bedrooms
fig = px.scatter(df, x="price", y="bedrooms", title="Preço x N° Quartos")
fig.show()

df.dtypes

corr = df.corr()

# Correlate Data
plt.figure(figsize=(11,8))
sns.heatmap(corr, annot=True, fmt='.2f', cmap="coolwarm")
plt.show()

fig = px.scatter(df, x="price", y="sqft_living", title="Preço x M2", trendline="ols")
fig.show()

#Selection of interesting Data
columns_to_remove = ["id", "date","yr_renovated", "zipcode"]
df = df.drop(columns_to_remove, axis=1)
df.sample(4)

for var in df.columns:
    fig = px.histogram(df, x=var, title=var)
    fig.show()
    
for var in df.columns:
    fig = px.box(df, y=var, title=var)
    fig.show()
    
# Separating X and y
X = df.drop('price', axis=1)
y = df["price"]

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=42)
X_train.shape, X_test.shape
y_train.shape, y_test.shape
sca = StandardScaler()
cols = X.columns
X_train = sca.fit_transform(X_train)
X_train = pd.DataFrame(X_train, columns=cols)
X_test = sca.fit_transform(X_test)
X_test = pd.DataFrame(X_test, columns=cols)

X_train

def evaluate_regression_model(model,X_test,y_test):
    pred = model.predict(X_test)
    print("R Square Error : ",r2_score(y_test,pred))
    print("Mean Absolute Error (MAE) : ",mean_absolute_error(y_test,pred))
    print("Mean Square Error (MSE) : ",mean_squared_error(y_test,pred, squared=True))
    print("Root Mean Square Error (RMSE) : ",mean_squared_error(y_test,pred, squared=False))
    
# Linear regression

rl = LinearRegression()
rl.fit(X_train, y_train)

# Evaluation
pred = rl.predict(X_test)

evaluate_regression_model(rl,X_test, y_test)
fig = px.scatter(x=y_test, y=pred, title="Real x Previsto", trendline="ols", labels={"x":"Real","y":"Previsto"})
fig.show()

